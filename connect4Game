// main method

package com.example.connect4;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

public class Main extends Application {
    private Controller controller;
    @Override
    public void start(Stage primarystage) throws Exception {
        FXMLLoader loader=new FXMLLoader(getClass().getResource("hello-view.fxml"));
        GridPane rootGridpane=loader.load();
        controller=loader.getController();
        controller.createPlayground();
       MenuBar menuBar= createMenu();
       menuBar.prefWidthProperty().bind(primarystage.widthProperty());
        Scene scene=new Scene(rootGridpane);
       Pane menupane= (Pane) rootGridpane.getChildren().get(0);

       menupane.getChildren().add(menuBar);

        primarystage.setScene(scene);
        primarystage.setTitle("Connect Four Game");
        primarystage.setResizable(false);
        primarystage.show();

    }
    private  MenuBar createMenu()
    {   // File Menu
        Menu fileMenu=new Menu("File");
        MenuItem newGame=new MenuItem("New game");
        // Lamda Expression
        newGame.setOnAction(event ->controller.resetGame());
        MenuItem reset=new MenuItem("Reset game");

        reset.setOnAction(actionEvent -> controller.resetGame());
        SeparatorMenuItem separatorMenuItem=new SeparatorMenuItem();
        MenuItem exitGame=new MenuItem("Exit game");

        exitGame.setOnAction(actionEvent -> exitGame());

        fileMenu.getItems().addAll(newGame,reset, separatorMenuItem,exitGame);
        // Help Menu
        Menu helpMenu=new Menu("Help");
        MenuItem aboutGame=new MenuItem("about Connect4");

        aboutGame.setOnAction(event->aboutGame());
        SeparatorMenuItem separator=new SeparatorMenuItem();
        MenuItem aboutMe=new MenuItem("about Me");

        aboutMe.setOnAction(event->aboutMe());
        helpMenu.getItems().addAll(aboutGame,separator,aboutMe);

        MenuBar menuBar=new MenuBar();

        menuBar.getMenus().addAll(fileMenu,helpMenu);
        return menuBar;
    }

    private void aboutMe() {
        Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("About the Developer ");
        alert.setHeaderText("Sriyank sidharth");
        alert.setContentText("I love to play around with code and create games . connect4 is one of them .In free time " +
                " I like to spend time with nears and dears ");
        alert.show();
    }

    private void aboutGame() {
        Alert alert=new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("About Connect Four");
        alert.setHeaderText("How to Play");
        alert.setContentText("Connect4  is a two - Player connection game in which the "+
                "Player first choose a color and then take turn droping colored Disc "+
                " from the top into the seven-Column,six row vertically suspended grid. " +
                "The piece fall straight down , occuping the the next Available space within the column "+
                "The objective of the game is to be the first to form a Horizontal, vertical," +
                "or Digonal line of gour ");
        alert.show();
    }

    private void exitGame() {
        Platform.exit();
        System.exit(0);
    }

    private void resetGame() {
        ////
    }

    public static void main(String[] args)
    {
        launch(args);
    }
}





  /* an other class and method */
   
   package com.example.connect4;

import javafx.animation.TranslateTransition;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Point2D;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.effect.Light;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.util.Duration;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Controller implements Initializable {
    private static final int Columns=7;
    private static final int Rows=6;
    private static final int Circle_Diameter=80;
    private static final String discColor1="#24303E";
    private static final String discColor2="#4CAA88";

    private static String Player_one="Player one";
    private  static String Player_Two="Player Two";

    private boolean isPlayerOneTurn=true;
    private Disc[][] insertedDiscsArray=new Disc[Rows][Columns];  // for structural changes for :developer
    @FXML
    public GridPane rootGridPane;
    @FXML
    public Pane insertedDiscsPane;
    @FXML
    public Label PlayerNameLabel;
    private boolean isAllowedToInsert=true;// flag to avoid same color disc being added
    public void createPlayground() {


       Shape rectangleWithHoles=createGameStructuralGrid();
        rootGridPane.add(rectangleWithHoles, 0, 1);
        List<Rectangle> rectangleList=createClickableColumns();
        for(Rectangle rectangle:rectangleList) {
            rootGridPane.add(rectangle, 0, 1);
        }
    }
   private Shape createGameStructuralGrid()
   {Shape rectangleWithHoles = new Rectangle((Columns+1) * Circle_Diameter, (Rows+1) * Circle_Diameter);
       for(int row=0;row<Rows;row++)
       {
           for(int col=0;col<Columns;col++)
           {   Circle circle = new Circle();
               circle.setRadius(Circle_Diameter / 2);
               circle.setCenterX(Circle_Diameter / 2);
               circle.setCenterY(Circle_Diameter / 2);
               circle.setSmooth(true);
               circle.setTranslateX(col* (Circle_Diameter + 5)+Circle_Diameter/4);
               circle.setTranslateY(row* (Circle_Diameter + 5)+Circle_Diameter/4);
               rectangleWithHoles=Shape.subtract(rectangleWithHoles,circle);
           }
       }
       rectangleWithHoles.setFill(Color.WHITE);
       return rectangleWithHoles;
   }
   private List<Rectangle> createClickableColumns()
   {
        List<Rectangle> rectangleList=new ArrayList<>();

       for(int col=0;col<Columns;col++) {
           Rectangle rectangle = new Rectangle(Circle_Diameter, (Rows + 1) * Circle_Diameter);
           rectangle.setFill(Color.TRANSPARENT);
           rectangle.setTranslateX(col*(Circle_Diameter+5)+Circle_Diameter / 4);

           rectangle.setOnMouseEntered(event->rectangle.setFill(Color.valueOf("#eeeeee26")));
           rectangle.setOnMouseExited(event->rectangle.setFill(Color.TRANSPARENT));
           final int column=col;
           rectangle.setOnMouseClicked(event->{
               if(isAllowedToInsert) {
                   isAllowedToInsert=false; // when disc is being dropped then no more disc will be inserted
                   insertDisc(new Disc(isPlayerOneTurn), column);
               }
           });
           rectangleList.add(rectangle);
       }
       return rectangleList;
   }

   private void insertDisc(Disc disc,int column)
   {   int row=Rows-1;
       while(row>=0)
       {
           if(getDiscIfPresent(row,column)==null)
               break;
           row--;
       }
       if(row<0)     // if it is full,we cannot anyone disc
           return;
       insertedDiscsArray[row][column]=disc;// for Structural changes :for developers
       insertedDiscsPane.getChildren().add(disc);
       disc.setTranslateX(column* (Circle_Diameter + 5)+Circle_Diameter/4);
       int currentRow=row;
       TranslateTransition translateTransition=new TranslateTransition(Duration.seconds(0.5),disc);
       translateTransition.setToY(row * (Circle_Diameter + 5)+Circle_Diameter/4);
       translateTransition.setOnFinished(event->{
           isAllowedToInsert=true; // Finally when disc is dropped allow next player to insert disc;
           if(gameEnded(currentRow,column))
           {
               gameOver();
               return;
           }
           isPlayerOneTurn=!isPlayerOneTurn;
           PlayerNameLabel.setText(isPlayerOneTurn ? Player_one:Player_Two);
       });
       translateTransition.play();

   }
   private boolean gameEnded(int row,int column)
   {    // Vertical Points: A small Example:Player has inserted his last disc at row=2,colum=3
       //index of each element present in column[rwo][column]:
       List<Point2D> verticalPoints= IntStream.rangeClosed(row-3,row+3)   //range of row values=0,1,2,3,4,5
                                              .mapToObj(r->new Point2D(r,column)) //0,3 1,3 2,3 ,3,3 4,3  5,3 ->point
                                                .collect(Collectors.toList());
       Point2D startPoint1=new Point2D(row-3,column+3);
       List<Point2D> diagonal1Point=IntStream.rangeClosed(0,6)
               .mapToObj(i->startPoint1.add(i,-i)).collect(Collectors.toList());

       Point2D startPoint2=new Point2D(row-3,column-3);
       List<Point2D> diagonal2Point=IntStream.rangeClosed(0,6)
               .mapToObj(i->startPoint2.add(i, i)).collect(Collectors.toList());


       List<Point2D> horizontalPoints= IntStream.rangeClosed(column-3,column+3)
                                              .mapToObj(col->new Point2D(row,col))
                                                     .collect(Collectors.toList());

       boolean isEnded=checkCombination(verticalPoints) ||checkCombination(horizontalPoints)
                           || checkCombination(diagonal1Point)||checkCombination(diagonal2Point);
       return isEnded;
   }

    private boolean checkCombination(List<Point2D> points)
    {   int chain=0;
        for(Point2D point:points)
        {
            int rowIndexForArray= (int) point.getX();
            int columnIndexForArray= (int) point.getY();
            Disc disc=getDiscIfPresent(rowIndexForArray,columnIndexForArray);
            if(disc!=null && disc.isPlayerOneMove==isPlayerOneTurn) { // if the last inserted Disc belongs to the current player
                chain++;
                if (chain == 4) {
                    return true;
                    }
            }
            else{
                    chain=0;
                }



        }
        return false;
    }

    private Disc getDiscIfPresent(int row,int column)
    { // To prevent ArrayIndexOutBoundExecution
        if(row>=Rows || row<0 || column>=Columns || column<0) //if  row or column index in invalid
            return null;
        return insertedDiscsArray[row][column];
    }

    private void gameOver()
   {
       String winner=isPlayerOneTurn ? Player_one:Player_Two;
       System.out.println("winner is " + winner);
       Alert alert=new Alert(Alert.AlertType.INFORMATION);
       alert.setTitle("Connect Four");
       alert.setHeaderText("The Winner is "+ winner);
       alert.setContentText("want to play again ? ");
       ButtonType yesBtn=new ButtonType("Yes");
       ButtonType noBtn=new ButtonType("No Exit");
       alert.getButtonTypes().setAll(yesBtn,noBtn);
       Platform.runLater(()->{
           Optional<ButtonType>  btnClick=alert.showAndWait();
           if(btnClick.isPresent() && btnClick.get()==yesBtn)
           {
               // user chose Yes so Reset the game
               resetGame();
           }
           else
           {
               //user chose No so Exit the game
               Platform.exit();
               System.exit(0);
           }
       });

   }

    public void resetGame() {

        insertedDiscsPane.getChildren().clear(); // remove all inserted disc from pane
        for(int row=0;row<insertedDiscsArray.length;row++)
        {
            for(int col=0;col<insertedDiscsArray[row].length; col++)
              insertedDiscsArray[row][col]=null;
        }
        isPlayerOneTurn=true; // let player start the game
        PlayerNameLabel.setText(Player_one);

        createPlayground(); // prepare a fresh playground
    }

    private static class Disc extends Circle{
        private final boolean isPlayerOneMove;
        public Disc(boolean isPlayerOneMove)
        {
            this.isPlayerOneMove=isPlayerOneMove;
            setRadius(Circle_Diameter/2);
            setFill(isPlayerOneMove? Color.valueOf(discColor1):Color.valueOf(discColor2));
            setCenterX(Circle_Diameter/2);
            setCenterY(Circle_Diameter/2);
        }
   }
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

    }
}


// scene builder code 

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>

<GridPane fx:id="rootGridPane" style="-fx-background-color: #D9F7F0;" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.example.connect4.Controller">
  <columnConstraints>
    <ColumnConstraints  />
    <ColumnConstraints maxWidth="324.0" minWidth="136.66666666666669" prefWidth="196.66666666666663" />
  </columnConstraints>
  <rowConstraints>
    <RowConstraints minHeight="10.0" prefHeight="30.0" />
    <RowConstraints />
  </rowConstraints>
   <children>
      <Pane GridPane.columnSpan="2" />
      <Pane fx:id="insertedDiscsPane" prefHeight="400.0" prefWidth="200.0" GridPane.rowIndex="1" />
      <VBox style="-fx-background-color: #2B3B4c;" GridPane.columnIndex="1" GridPane.rowIndex="1">
         <children>
            <Region prefHeight="200.0" prefWidth="200.0" />
            <Label fx:id="PlayerNameLabel" alignment="CENTER" prefHeight="35.0" prefWidth="299.0" text="Player One" textFill="#edc9c9">
               <font>
                  <Font name="System Bold" size="24.0" />
               </font>
            </Label>
            <Label alignment="CENTER" prefHeight="51.0" prefWidth="329.0" text="Turn" textFill="#f8f7f7">
               <font>
                  <Font size="35.0" />
               </font>
            </Label>
            <Region prefHeight="200.0" prefWidth="200.0" VBox.vgrow="ALWAYS" />
         </children>
      </VBox>
   </children>
</GridPane>

